/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: unlock_command.proto */

#ifndef PROTOBUF_C_unlock_5fcommand_2eproto__INCLUDED
#define PROTOBUF_C_unlock_5fcommand_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct _UnlockRequest UnlockRequest;
typedef struct _UnlockResponse UnlockResponse;


/* --- enums --- */


/* --- messages --- */

struct  _UnlockRequest
{
  ProtobufCMessage base;
  Google__Protobuf__Timestamp *when;
  char *requestedfrom;
};
#define UNLOCK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlock_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


struct  _UnlockResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean succeed;
  char *errordetail;
};
#define UNLOCK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&unlock_response__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/* UnlockRequest methods */
void   unlock_request__init
                     (UnlockRequest         *message);
size_t unlock_request__get_packed_size
                     (const UnlockRequest   *message);
size_t unlock_request__pack
                     (const UnlockRequest   *message,
                      uint8_t             *out);
size_t unlock_request__pack_to_buffer
                     (const UnlockRequest   *message,
                      ProtobufCBuffer     *buffer);
UnlockRequest *
       unlock_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlock_request__free_unpacked
                     (UnlockRequest *message,
                      ProtobufCAllocator *allocator);
/* UnlockResponse methods */
void   unlock_response__init
                     (UnlockResponse         *message);
size_t unlock_response__get_packed_size
                     (const UnlockResponse   *message);
size_t unlock_response__pack
                     (const UnlockResponse   *message,
                      uint8_t             *out);
size_t unlock_response__pack_to_buffer
                     (const UnlockResponse   *message,
                      ProtobufCBuffer     *buffer);
UnlockResponse *
       unlock_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   unlock_response__free_unpacked
                     (UnlockResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*UnlockRequest_Closure)
                 (const UnlockRequest *message,
                  void *closure_data);
typedef void (*UnlockResponse_Closure)
                 (const UnlockResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Commands_Service Commands_Service;
struct _Commands_Service
{
  ProtobufCService base;
  void (*unlock)(Commands_Service *service,
                 const UnlockRequest *input,
                 UnlockResponse_Closure closure,
                 void *closure_data);
};
typedef void (*Commands_ServiceDestroy)(Commands_Service *);
void commands__init (Commands_Service *service,
                     Commands_ServiceDestroy destroy);
#define COMMANDS__BASE_INIT \
    { &commands__descriptor, protobuf_c_service_invoke_internal, NULL }
#define COMMANDS__INIT(function_prefix__) \
    { COMMANDS__BASE_INIT,\
      function_prefix__ ## unlock  }
void commands__unlock(ProtobufCService *service,
                      const UnlockRequest *input,
                      UnlockResponse_Closure closure,
                      void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor unlock_request__descriptor;
extern const ProtobufCMessageDescriptor unlock_response__descriptor;
extern const ProtobufCServiceDescriptor commands__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_unlock_5fcommand_2eproto__INCLUDED */
